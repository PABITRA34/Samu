https://cses.fi/problemset/task/1194
You and some monsters are in a labyrinth. When taking a step to some direction in the labyrinth, each monster may simultaneously take one as well. Your goal is to reach one of the boundary squares without ever sharing a square with a monster.
Your task is to find out if your goal is possible, and if it is, print a path that you can follow. Your plan has to work in any situation; even if the monsters know your path beforehand.
Input
The first input line has two integers n and m: the height and width of the map.
After this there are n lines of m characters describing the map. Each character is . (floor), # (wall), A (start), or M (monster). There is exactly one A in the input.
Output
First print "YES" if your goal is possible, and "NO" otherwise.
If your goal is possible, also print an example of a valid path (the length of the path and its description using characters D, U, L, and R). You can print any path, as long as its length is at most n \cdot m steps.
Constraints

1 \le n,m \le 1000

Example
Input:
5 8
########
#M..A..#
#.#.M#.#
#M#..#..
#.######

Output:
YES
5
RRDDR



 
ll n, e;
pii start , endg;
ll r, c;
vector<vector<ll>> g;
vector<pii>monsters;// position of the monsters in the grid intially
map< pii, pii> par_map;//  tum mujhe node do me tumhe parent dunga
bool isValid(ll i, ll j, ll timer)
{
   if(i<0|| i>=r || j<0 || j>=c) return false;// boundary check
    if(timer >= g[i][j]) return false ; // me reaching after lava reached
 
    return true;
}
 
bool can_escape(ll i, ll j, ll timer){
    if(!isValid(i,j,timer)) return false;
    if (i == 0 || i == r - 1 ||j == 0 || j == c - 1) return true;
    return false;   
}
 
// use multi source bfs to find the least time the lava wil take to reach a partucular cell [preprocessing]
 
void preprocess_lava_flow_time(){
    queue< pair< pii, ll> >q; // {cell, time to visit this cell}
    for(auto &m: monsters){
        q.push({m,0});
    }
 
   while(!q.empty()){
       auto top=q.front(); q.pop();
       ll cx=top.first.first;
       ll cy=top.first.second;
       ll timer=top.second;
       timer++;
 
       for(ll d=0; d<4; d++){
         ll nx=cx+dr[d], ny=cy+dc[d];
         if(isValid(nx,ny,timer)){
            // cout<<"bol preprocess hua ki nahi\n";
             g[nx][ny]= timer;
             q.push({ {nx,ny},timer});
         }
       }      
 
   } 
}
// now do the final bfs to check whether there exists a boundary cell which can ebe reached before the monster (lava) reaches that particular cell
bool escape_bfs(){
     queue< pair< pii, ll> >q;
     q.push({start,0});
     par_map[start]={-1,-1};
 
     while(!q.empty()){
        
        auto top=q.front(); q.pop();
        ll cx=top.first.first;
         ll cy=top.first.second;
         ll timer= top.second;
 
         timer++;
 
    for(ll d=0; d<4; d++){
         
         ll nx=cx+dr[d], ny=cy+dc[d];
         if(can_escape(nx,ny,timer)){
             par_map[{nx,ny}]= {cx,cy};
             endg={nx,ny};
           
             //g[nx][ny]=timer;
             return true;
         }   
        if(isValid(nx,ny,timer)){
            
            par_map[{nx,ny}]= {cx,cy};
             g[nx][ny]=timer;
             q.push({{nx,ny},timer});
       }  
    }   
   
  }
 
 return false;     
}
//string dir = "LRUD";
 
void solve()
{
    cin >> r >> c;
    g.resize(r);
    for(ll i=0; i<r; i++){
        g[i].resize(c,INT_MAX);
    }
 
     start = {-1, -1};
    for (ll i = 0; i < r; i++)
    {
        for (ll j = 0; j < c; j++)
        {
            char ch;
            cin >>ch;
            if (ch == 'A')
            {
                start = {i, j};
                g[i][j] = 0; // matrking 0 so that this  is invalided for future 
            }
            else if (ch == '#')
            {
                g[i][j] = 0;
            }
            else if (ch == 'M')
            {
                g[i][j] = 0;
                monsters.pb({i, j});
            }
            else
                g[i][j] = INT_MAX;
        }
    }
 
 
     preprocess_lava_flow_time();
    // imp edge case
    if(start.first==0 ||start.first==r-1 || start.second==c-1 || start.second==0){
        cout<<"YES\n";
            cout<<0<<"\n"; return;
        }
    if (!escape_bfs())
    {
        cout<<"NO\n";
       
    }
    else
    {
        cout << "YES\n";
        vector<char>path;      
        pii node= endg;
        pii parent=par_map[node];
        pii rook={-1,-1};
        while(node !=rook){
            ll dx= node.first- parent.first;
            ll dy= node.second- parent.second;
            if(dx==1 && dy==0) path.pb('D');
            else if(dx==-1 && dy==0) path.pb('U');
            else if(dx==0 && dy==-1) path.pb('L');
            else if(dx==0 && dy==1) path.pb('R');
            node=par_map[node];
            parent=par_map[node];
        }
      reverse(all(path));
 
        cout << path.size() << "\n";
        for(auto & it:path){
            cout<<it;
        }
        cout << "\n";
    }
}
 
int32_t main()
{
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    int t;
    // cin >> t;
    // while (t--){
 
    solve();
    
    
    // }
    return 0;
}
